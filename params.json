{
  "name": "Wetterbot",
  "tagline": "Interprets questions about weather in natural language and (hopefully) delivers adequate information about the weather. ",
  "body": "# Wetterbot\r\nInterprets questions about the weather in natural language and (hopefully) delivers adequate information about the weather. \r\nThis is a group project that I'll be doing for the course \"Einführung in die maschinelle Sprachverarbeitung mit Python\". \r\nIn the initial phase it will only work with German input. \r\nThe rest of the readme.md will be in German.\r\n\r\n## Einführung\r\nDas Projekt soll Wetterabfragen in natürlicher Sprache bearbeiten und adäquate Antworten liefern.<br>\r\nBeispiele für Fragen sind: \r\n- Regnet es?\r\n- Wie warm ist es in Berlin?\r\n- Wie ist das Wetter am Dienstag?\r\n- Ist es morgen sonnig?\r\n\r\nUser-Abfragen, die nichts mit dem Wetter zu tun haben, sollten auch behandelt werden können.\r\n\r\n## Python Module, APIs und andere Hilfsmittel\r\n##### NTLK\r\nIm Kurs wurde viel mit dem Natural Language Toolkit (http://www.nltk.org/) gearbeitet. Deshalb wird es auch für dieses Projekt verwendet.\r\nDas Python-Modul kann man ganz einfach mit diesem Befehl installieren:<br> \r\n`python3 -m pip install nltk`\r\n\r\n##### OpenWeatherAPI, pyowm, ipinfo, requests\r\nFür das Projekt wird die OpenWeatherMAP API benutzt. Für einen API Key muss man sich dort registrieren. Es gibt einen kostenlosen Plan. \r\nAls Hilfsmittel wird das Python-Modul “pyowm” verwendet.\r\n- https://pyowm.readthedocs.io/en/latest/ <br>\r\n\r\nKonkret interessant werden wohl diese Teile der Dokumentation sein:\r\n- https://pyowm.readthedocs.io/en/latest/pyowm.webapi25.html#module-pyowm.webapi25.observation\r\n- https://pyowm.readthedocs.io/en/latest/pyowm.utils.html\r\n\r\nDas Python-Modul kann man ganz einfach mit diesem Befehl installieren: <br>\r\n`python3 -m pip install pyowm`\r\n\r\nEin Anfang wäre:\r\n~~~~\r\nimport pyowm\r\n# API Key\r\nowm = pyowm.OWM('hier API einfügen')\r\nobservation = owm.weather_at_place(\"Berlin,de\")\r\nw = observation.get_weather()\r\n# Temperatur\r\nprint(w.get_temperature('celsius')['temp'])\r\n~~~~\r\nDas Ding gibt die momentane Temperatur in Berlin aus. Das Skript owmtest.py ist noch ein wenig ausführlicher und zeigt weitere Funktionalitäten von pyowm.\r\n\r\nFalls der User keinen Ort angibt, lässt sich mittels der IP Geolocation API der Ort des Users anhand seiner IP Adresse bestimmen.\r\n- http://ipinfo.io/developers \r\n\r\nDazu benötigt man das Python-Modul \"requests\": <br> \r\n`python3 -m pip install requests`\r\n\r\nDas hier gibt die Stadt aus.\r\n~~~~\r\nimport requests\r\nr = requests.get('http://ipinfo.io/city')\r\nprint(r.text)\r\n~~~~\r\n\r\n##### Telegram Bot API\r\nDas Ziel ist, das Projekt in Form eines Telegram Bots zu realisieren.\r\nDie Telegram Bot API: https://core.telegram.org/bots\r\n\r\nMockup als Telegram-Bot\r\n![Wetterbot Mockup](https://raw.githubusercontent.com/phucdev/weatherbot/master/iOS%20Mockup.png)\r\n\r\n#### StanfordNERTagger\r\nUm den Ort aus dem User-Input zu identifizieren, wird der StanfordNERTagger (Named Entity Recognizer) verwendet.\r\n- http://nlp.stanford.edu/software/CRF-NER.shtml\r\n- http://www.nltk.org/api/nltk.tag.html#module-nltk.tag.stanford\r\n\r\nOrte werden mit 'LOCATION' getaggt. \r\nMomentan gibt es folgende Probleme: \r\n- Man muss sich den StanfordNERTagger installieren und sich die Models (zum Training) herunterladen. Der StanfordNERTagger funktioniert deshalb nur lokal auf dem (bzw. meinem) Computer.\r\n- Da ich noch nicht herausbekommen habe, wie man den StanfordNERTagger auf deutschen Input umstellt, verwende ich ein englisches Model. Damit kann der StanfordNERTagger aber auch die Orte identifizieren.\r\n\r\n## Struktur des Projekts und zentrale Probleme\r\n\r\n### Struktur\r\n\r\n##### wetterbot.py\r\nDieses Skript sollte die ganze Anbindung an die Telegram Bot API (Interaktion mit der API und dem User) bzw. die ganze Steuerung übernehmen.\r\n\r\n##### extractor.py\r\nDieses Skript sollte den Input verarbeiten und an weather.py schicken. Bei Fragen, wo der Ort nicht spezifiziert wird, sollte nachgefragt werden oder wenn es geht, dann sollte der Ort automatisch durch Geo-Location bestimmt werden. Diesen soll der Bot bzw. das Programm sich für darauf folgende Fragen merken.\r\n\r\n##### weather.py\r\nDie Anbindung an die Wetter API ist nicht schwer, weil das Python Modul OWM die meiste Arbeit für uns erledigt. Also an die Wetterdaten ranzukommen ist relativ einfach.\r\nDas Python Skript weather.py übernimmt da die ganze Arbeit. Alle weiteren Wetter-Funktionen sollten dort reingeschrieben werden.\r\n\r\nIm Wesentlichen gibt es drei Variablen:\r\n- place → Ort\r\n- time → Zeit \r\n- query → Typ von Abfrage (Wetter, Temperatur, sunny?, rainy?, random)  \r\n\r\n### Probleme\r\nDas Schwierigste ist tatsächlich die Verarbeitung des Inputs (extractor.py).\r\n- Ort erkennen\r\n- Zeit erkennen\r\n- Art der Wetterabfrage erkennen\r\n- ungültigen Input behandeln",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}